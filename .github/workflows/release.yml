name: Release Docker Images

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag'
        required: true
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha

    - name: Build and push frontend
      uses: docker/build-push-action@v5
      with:
        context: ./client
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Build and push backend
      uses: docker/build-push-action@v5
      with:
        context: ./server
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          🎉 **照片展示墙 v2.0 - Docker镜像发布**
          
          ## 🆕 新功能
          - 🎭 **照片-艺人关联系统**：智能搜索和关联功能
          - 📊 **Excel/CSV批量导入**：支持艺人数据批量管理
          - 🔐 **安全权限控制**：管理员身份验证和权限管理
          - 🗄️ **MongoDB集成**：完整的数据库支持
          
          ## 📦 Docker镜像
          
          **前端镜像:**
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
          ```
          
          **后端镜像:**
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
          ```
          
          ## 🚀 快速部署
          
          **群晖部署:**
          ```bash
          # 下载配置文件
          wget https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.synology.yml
          
          # 启动服务
          docker-compose -f docker-compose.synology.yml up -d
          ```
          
          **通用部署:**
          ```bash
          # 下载配置文件
          wget https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.prod.yml
          
          # 启动服务
          docker-compose -f docker-compose.prod.yml up -d
          ```
          
          ## 📖 文档
          - [部署指南](https://github.com/${{ github.repository }}/blob/main/README.md)
          - [群晖部署](https://github.com/${{ github.repository }}/blob/main/SYNOLOGY-DEPLOYMENT.md)
          
          ## ⚠️ 重要提醒
          - v2.0需要MongoDB数据库支持
          - 首次部署请创建必要的数据目录
          - 建议定期备份MongoDB数据
        draft: false
        prerelease: false
